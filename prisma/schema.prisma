// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  clerkId   String   @unique
  email     String?  @unique
  name      String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  jobs        Job[]
  timeEntries TimeEntry[]
}

// model TimeEntry {
//   id            Int       @id @default(autoincrement())
//   userId        Int
//   jobId         Int?
//   startedAt     DateTime
//   endedAt       DateTime? // null while running
//   // optional fast sum cache; keep if you want manual entries
//   manualMinutes Int? // e.g., for “just input hours”

//   user      User     @relation(fields: [userId], references: [id])
//   job       Job?     @relation(fields: [jobId], references: [id])
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt
// }
model TimeEntry {
  id            Int       @id @default(autoincrement())
  userId        Int
  jobId         Int
  startedAt     DateTime?
  endedAt       DateTime?
  manualMinutes Int? // only set if not using start/stop

  user User @relation(fields: [userId], references: [id])
  job  Job  @relation(fields: [jobId], references: [id])
}

enum JobStatus {
  ACTIVE
  PAUSED
  DONE
}

model Job {
  id           Int       @id @default(autoincrement())
  userId       Int
  name         String
  description  String?
  status       JobStatus @default(ACTIVE)
  totalMinutes Int       @default(0) // ✅ sum cache
  runningSince DateTime? // ✅ null when not running
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  user        User        @relation(fields: [userId], references: [id])
  timeEntries TimeEntry[]
}
