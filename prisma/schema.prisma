// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  clerkId     String      @unique
  createdAt   DateTime    @default(now())
  email       String?     @unique
  id          Int         @id @default(autoincrement())
  jobs        Job[]
  name        String?
  timeEntries TimeEntry[]
}

model Job {
  createdAt         DateTime    @default(now())
  description       String?
  id                Int         @id @default(autoincrement())
  name              String
  runningSince      DateTime? // null if not running
  status            JobStatus   @default(ACTIVE)
  timeEntries       TimeEntry[]
  totalMilliseconds Int         @default(0)
  updatedAt         DateTime    @updatedAt()
  user              User        @relation(fields: [userId], references: [id])
  userId            Int

  @@index([userId])
}

model TimeEntry {
  duration      Int? // optional cache for finalized timer entries (minutes)
  endedAt       DateTime? // null while running
  id            Int       @id @default(autoincrement())
  job           Job       @relation(fields: [jobId], references: [id])
  jobId         Int
  manualMinutes Int? // set for manual entries; leave null for timer entries
  startedAt     DateTime? // null for manual-only entries
  user          User      @relation(fields: [userId], references: [id])
  userId        Int

  @@index([jobId, startedAt])
  @@index([userId, jobId])
}

enum JobStatus {
  ACTIVE
  DONE
  PAUSED
}
